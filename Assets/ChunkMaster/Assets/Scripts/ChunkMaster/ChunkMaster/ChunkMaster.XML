<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChunkMaster</name>
    </assembly>
    <members>
        <member name="T:ChunkMaster.NET.Factory.ChunkMasterFactory">
            <summary>
            The chunkmaster factory creates all necessary objects.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Factory.ChunkMasterFactory.CreateBlock(ChunkMaster.Utils.Point,ChunkMaster.NET.Interfaces.IChunk)">
            <summary>
            Creates a block of interface IBlock.
            </summary>
            <param name="worldPosition">The block in world space.</param>
            <param name="chunk">The block's associated parent.</param>
            <returns>IBlock</returns>
        </member>
        <member name="M:ChunkMaster.NET.Factory.ChunkMasterFactory.CreateChunk(ChunkMaster.Utils.Point,ChunkMaster.NET.Interfaces.ISector)">
            <summary>
            Creates a chunk of interface IChunk.
            </summary>
            <param name="worldPosition">The world position of this chunk.</param>
            <param name="sector">The chunk's associated sector.</param>
            <returns>IChunk</returns>
        </member>
        <member name="M:ChunkMaster.NET.Factory.ChunkMasterFactory.CreateSector(ChunkMaster.Utils.Point,ChunkMaster.NET.Interfaces.IWorld)">
            <summary>
            Creates a sector of interface ISector.
            </summary>
            <param name="worldPosition">The sector's world position.</param>
            <param name="world">The world associated to this sector.</param>
            <returns>ISector</returns>
        </member>
        <member name="T:ChunkMaster.NET.Framework.Block">
            <summary>
            Block class is the meat of the world class. 
            The world contains sectors, which contain chunks, 
            which contains blocks. The blocks can be edited by 
            changing their values. Blocks can be stored in an 
            external file using a multidimensional byte array, 
            generated by the sector class.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Framework.Block.guid">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Block.content">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Block.world">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Block.worldPosition">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Block.chunk">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Block.sector">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Block.#ctor(ChunkMaster.Utils.Point,ChunkMaster.NET.Interfaces.IChunk)">
            <summary>
            The block constructor requires the block's world position and the parent chunk object.
            </summary>
            <param name="worldPosition">The block's world position.</param>
            <param name="chunk">The block's parent chunk.</param>
        </member>
        <member name="M:ChunkMaster.NET.Framework.Block.GetContent">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Block.SetContent(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Block.Destroy">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Block.ToString">
            <inheritdoc />
        </member>
        <member name="T:ChunkMaster.NET.Framework.Chunk">
            <summary>
            The chunk class allows the world to store blocks inside chunks.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Framework.Chunk.guid">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Chunk.world">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Chunk.isOccupied">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Chunk.blocks">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Chunk.worldPosition">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Chunk.sector">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Chunk.chunkMatrixPoint">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.#ctor(ChunkMaster.Utils.Point,ChunkMaster.NET.Interfaces.ISector)">
            <summary>
            The chunk constructor.
            </summary>
            <param name="worldPosition">The chunk's position in world space.</param>
            <param name="sector">The chunk's parent sector.</param>
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.ClearBlocks">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.GetBlock(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.Destroy">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.GetBlockByIndex(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.GetPointByIndex(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.GetIndexByPoint(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Chunk.ToString">
            <inheritdoc />
        </member>
        <member name="T:ChunkMaster.NET.Framework.Sector">
            <summary>
            The sector class manipulates the chunks inside the current sector.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Framework.Sector.guid">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Sector.world">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Sector.chunks">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Sector.worldPosition">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Sector.isOccupied">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.Sector.sectorMatrixPoint">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.#ctor(ChunkMaster.Utils.Point,ChunkMaster.NET.Interfaces.IWorld)">
            <summary>
            The sector constructor.
            </summary>
            <param name="worldPosition">The sector's position in world space.</param>
            <param name="world">The sector's parent world.</param>
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.ClearChunks">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.Destroy">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.GetChunk(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.GetChunkByIndex(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.GetIndexByPoint(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.GetPointByIndex(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.GetBlocksArray">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.SetBlocksArray(System.Byte[][])">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.Sector.ToString">
            <inheritdoc />
        </member>
        <member name="T:ChunkMaster.NET.Framework.World">
            <summary>
            The World class used for creating worlds.
            <code>
            // Create a world object.
            World myWorld = new World("myWorld");
            
            // Get a point in world space.
            Point worldPoint = new Point(3, -1, 2);
            
            // Get a block in world space.
            Block block = myWorld.GetBlock(worldPoint) as Block;
            
            // Edit a block in world space.
            myWorld.SetBlock(worldPoint, 0); // Assign the current point with a value of 0.
            </code>
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Framework.World.guid">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.World.chunkSize">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.World.sectorSize">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.World.name">
            <inheritdoc />
        </member>
        <member name="P:ChunkMaster.NET.Framework.World.sectors">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            The world constructor.
            </summary>
            <param name="name">The world's name. Used for file writing.</param>
            <param name="chunkSize">The world's chunk size.</param>
            <param name="sectorSize">The world's sector size.</param>
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.GetBlock(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.SetBlock(ChunkMaster.Utils.Point,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.ClearBlock(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.ClearChunk(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.ClearSector(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.ClearSectors">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.IsOccupied(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.GetSector(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.GetChunk(ChunkMaster.Utils.Point)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.SaveWorld(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.SaveSector(ChunkMaster.Utils.Point,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.LoadSector(ChunkMaster.Utils.Point,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.Destroy">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.NET.Framework.World.ToString">
            <inheritdoc />
        </member>
        <member name="T:ChunkMaster.NET.Interfaces.IBlock">
            <summary>
            Block class is the meat of the world class. 
            The world contains sectors, which contain chunks, 
            which contains blocks. The blocks can be edited by 
            changing their values. Values are stored as a byte array.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IBlock.guid">
            <summary>
            This object's guid.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IBlock.content">
            <summary>
            The block's details stored as a multidimensional byte array.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IBlock.world">
            <summary>
            The block's related world.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IBlock.worldPosition">
            <summary>
            The block's position in world space.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IBlock.chunk">
            <summary>
            The block's chunk parent.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IBlock.sector">
            <summary>
            The block's sector parent.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IBlock.GetContent">
            <summary>
            Retrieves this block's current content.
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IBlock.SetContent(System.Object)">
            <summary>
            Sets this block's current content with new content;
            </summary>
            <param name="obj">The object that you would like to set to the block's content.</param>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IBlock.Destroy">
            <summary>
            The Destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IBlock.ToString">
            <summary>
            Displays block's details.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:ChunkMaster.NET.Interfaces.IChunk">
            <summary>
            The chunk class allows the world to store blocks inside chunks.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IChunk.guid">
            <summary>
            This object's guid.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IChunk.world">
            <summary>
            The current world object.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IChunk.isOccupied">
            <summary>
            Returns true if the chunk is occupied with blocks.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IChunk.blocks">
            <summary>
            The blocks associated to the current chunk.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IChunk.worldPosition">
            <summary> 
            The chunk's position in world space.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IChunk.sector">
            <summary>
            The chunk's parent.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IChunk.chunkMatrixPoint">
            <summary>
            Retrieve the matrix relative to the parent sector.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IChunk.ClearBlocks">
            <summary>
            Clears all blocks in this chunk.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IChunk.Destroy">
            <summary>
            Calls the destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IChunk.GetBlock(ChunkMaster.Utils.Point)">
            <summary>
            Get block by a point in world space.
            </summary>
            <param name="point">The point in world space.</param>
            <returns>IBlock</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IChunk.GetBlockByIndex(System.Int32)">
            <summary>
            Get a block by index.
            </summary>
            <param name="index">The block's index.</param>
            <returns>IBlock</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IChunk.GetPointByIndex(System.Int32)">
            <summary>
            Gets a point point by index.
            </summary>
            <param name="index">The index to convert to world point.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IChunk.GetIndexByPoint(ChunkMaster.Utils.Point)">
            <summary>
            Gets the index by a point in world space.
            </summary>
            <param name="worldPoint">The point in world space.</param>
            <returns>int</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IChunk.ToString">
            <summary>
            Displays the block's details.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:ChunkMaster.NET.Interfaces.ISector">
            <summary>
            The sector class manipulates the chunks inside the current sector.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.ISector.guid">
            <summary>
            This object's guid.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.ISector.world">
            <summary>
            The current world object.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.ISector.isOccupied">
            <summary>
            Returns true if the sector is occupied with blocks.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.ISector.chunks">
            <summary>
            The chunks associated to the current sector.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.ISector.worldPosition">
            <summary>
            The sector's world position.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.ISector.sectorMatrixPoint">
            <summary>
            Get the sector matrix point.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.ClearChunks">
            <summary>
            Clears all chunks in this sector.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.Destroy">
            <summary>
            Calls the destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.GetChunk(ChunkMaster.Utils.Point)">
            <summary>
            Get a chunk by a point in world space.
            </summary>
            <param name="point">The point in world space.</param>
            <returns>IChunk</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.GetChunkByIndex(System.Int32)">
            <summary>
            Get a chunk by index.
            </summary>
            <param name="index">The chunk's index.</param>
            <returns>IChunk</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.GetIndexByPoint(ChunkMaster.Utils.Point)">
            <summary>
            Gets the index by a point in world space.
            </summary>
            <param name="worldPoint">Get the index by a point in world space.</param>
            <returns>int</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.GetPointByIndex(System.Int32)">
            <summary>
            Gets a chunk point by index.
            </summary>
            <param name="index">The index to convert to world point.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.GetBlocksArray">
            <summary>
            Retrieves a multidimensional block array of all blocks in this sector.
            </summary>
            <returns>byte[][]</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.SetBlocksArray(System.Byte[][])">
            <summary>
            Sets all blocks in this sector by block array.
            </summary>
            <param name="blocksArray">Requires a mutlidimensional byte array that you would like to copy.</param>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.ISector.ToString">
            <summary>
            Displays the sector's details.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:ChunkMaster.NET.Interfaces.IWorld">
            <summary>
            The World class used for creating worlds.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IWorld.guid">
            <summary>
            This object's guid.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IWorld.chunkSize">
            <summary>
            The chunk size.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IWorld.sectorSize">
            <summary>
            The sector size.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IWorld.name">
            <summary>
            The world name.
            </summary>
        </member>
        <member name="P:ChunkMaster.NET.Interfaces.IWorld.sectors">
            <summary>
            The current loaded sectors. Given the fact that a world 
            can be infinite, we only load sectors if needed.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.GetBlock(ChunkMaster.Utils.Point)">
            <summary>
            Gets the block given a point in space.
            </summary>
            <param name="point">The point in world space.</param>
            <returns>IBlock</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.SetBlock(ChunkMaster.Utils.Point,System.Object)">
            <summary>
            Set a block by point.
            </summary>
            <param name="point">The point in world space.</param>
            <param name="content">The content at which you would like to write the block with.</param>
            <returns>IBlock</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.ClearBlock(ChunkMaster.Utils.Point)">
            <summary>
            Erases the current block's content.
            </summary>
            <param name="point">Requires the point in world space that you would like to erase.</param>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.ClearChunk(ChunkMaster.Utils.Point)">
            <summary>
            Erases the current chunk's content.
            </summary>
            <param name="point">Requires the point in world space that you would like to erase.</param>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.ClearSector(ChunkMaster.Utils.Point)">
            <summary>
            Erases the current sector's content.
            </summary>
            <param name="point">Requires the point in world space that you would like to erase.</param>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.Destroy">
            <summary>
            Calls the destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.IsOccupied(ChunkMaster.Utils.Point)">
            <summary>
            Is the current point in space occupied by another block?
            </summary>
            <param name="point">Provided with a point in world space.</param>
            <returns>bool</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.GetSector(ChunkMaster.Utils.Point)">
            <summary>
            Retrieves sector by point.
            If sector does not exist, it will create one
            </summary>
            <param name="point">The point in world space.</param>
            <returns>ISector</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.GetChunk(ChunkMaster.Utils.Point)">
            <summary>
            Retrieves the chunk given a point in world space.
            </summary>
            <param name="point">Provided with a point in world space.</param>
            <returns>IChunk</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.SaveWorld(System.String)">
            <summary>
            Saves the current world to a given directory.
            </summary>
            <param name="url">The directory at which you would like to save your world to. Default is World/WorldName.</param>
            <returns>string</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.SaveSector(ChunkMaster.Utils.Point,System.String)">
            <summary>
            Saves the current world to a given directory.
            </summary>
            <param name="point">Requires a point in world space.</param>
            <param name="url">The directory at which you would like to save your world to. Default is World/WorldName.</param>
            <returns>string</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.LoadSector(ChunkMaster.Utils.Point,System.String)">
            <summary>
            Loads a sector from a file and returns  it.
            </summary>
            <param name="point">Requires a point in world space.</param>
            <param name="url">The url where the file is loaded.  </param>
            <returns>Sector</returns>
        </member>
        <member name="M:ChunkMaster.NET.Interfaces.IWorld.ToString">
            <summary>
            Displays the world details.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:ChunkMaster.Unity.Fractory.TransformFactory">
            <summary>
            This class allows developers to create transforms with ease of access.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Fractory.TransformFactory.CreateTransform(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform)">
            <summary>
            This method retrieves a new transform object and adds it to your game scene.
            </summary>
            <param name="name">The transform's name.</param>
            <param name="worldPosition">The world postion of the transform.</param>
            <param name="rotation">The transform's rotation.</param>
            <param name="scale">The transform's scale.</param>
            <param name="parent">The transform's parent.</param>
            <returns>Transform</returns>
        </member>
        <member name="T:ChunkMaster.Unity.Framework.UnityBlock">
            <summary>
            Block class is the meat of the world class. 
            The world contains sectors, which contain chunks, 
            which contains blocks. The blocks can be edited by 
            changing their values. Blocks can be stored in an 
            external file using a multidimensional byte array, 
            generated by the sector class.
            </summary>
        </member>
        <member name="P:ChunkMaster.Unity.Framework.UnityBlock.gameObject">
            <summary>
            The 3D game object in run time space.
            </summary>
        </member>
        <member name="P:ChunkMaster.Unity.Framework.UnityBlock.worldPosition">
            <summary>
            Returns the current reference as a vector3 relative to the world space.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityBlock.#ctor(UnityEngine.Vector3,ChunkMaster.NET.Interfaces.IChunk)">
            <summary>
            The constructor with parameters.
            </summary>
            <param name="worldPosition">Requires the block's world point.</param>
            <param name="chunk">Requires the parent chunk object for rendering.</param>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityBlock.Destroy">
            <summary>
            The Destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityBlock.ToString">
            <inheritdoc />
        </member>
        <member name="T:ChunkMaster.Unity.Framework.UnityChunk">
            <summary>
            The chunk class allows the world to store blocks inside chunks.
            </summary>
        </member>
        <member name="P:ChunkMaster.Unity.Framework.UnityChunk.gameObject">
            <summary>
            The associated gameObject.
            </summary>
        </member>
        <member name="P:ChunkMaster.Unity.Framework.UnityChunk.worldPosition">
            <summary>
            Returns the current reference as a vector3 relative to the world space.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityChunk.#ctor(UnityEngine.Vector3,ChunkMaster.NET.Interfaces.ISector)">
            <summary>
            The constructor with parameters.
            </summary>
            <param name="worldPosition">Requires the sector's world point.</param>
            <param name="sector">Requires the chunk's sector.</param>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityChunk.GetBlock(UnityEngine.Vector3)">
            <summary>
            Get block by a point in world space.
            </summary>
            <param name="point">The point in world space.</param>
            <returns>IBlock</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityChunk.Destroy">
            <summary>
            The Destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityChunk.ToString">
            <summary>
            Displays the current chunk's details.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:ChunkMaster.Unity.Framework.UnitySector">
            <summary>
            The sector class manipulates the chunks inside the current sector.
            </summary>
        </member>
        <member name="P:ChunkMaster.Unity.Framework.UnitySector.gameObject">
            <summary>
            The associated gameObject.
            </summary>
        </member>
        <member name="P:ChunkMaster.Unity.Framework.UnitySector.worldPosition">
            <summary>
            Returns the current reference as a vector3 relative to the world space.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnitySector.#ctor(UnityEngine.Vector3,ChunkMaster.NET.Interfaces.IWorld)">
            <summary>
            The constructor with parameters.
            </summary>
            <param name="worldPosition">Requires the sector's world point.</param>
            <param name="world">Requires the current world that the sector is inside.</param>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnitySector.GetChunk(UnityEngine.Vector3)">
            <summary>
            Get a chunk by a point in world space.
            </summary>
            <param name="point">The point in world space.</param>
            <returns>IChunk</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnitySector.Destroy">
            <summary>
            The Destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnitySector.ToString">
            <summary>
            Displays the current sector's details.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:ChunkMaster.Unity.Framework.UnityWorld">
            <summary>
            The World class used for creating worlds in the unity engine.
            </summary>
        </member>
        <member name="P:ChunkMaster.Unity.Framework.UnityWorld.gameObject">
            <summary>
            The parent transform object.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.#ctor(UnityEngine.Transform,System.String,System.Int32,System.Int32)">
            <summary>
            Unity world constructor.
            </summary>
            <param name="parent">Requires the object's parent gameObject.</param>
            <param name="name">Requires the world's name.</param>
            <param name="chunkSize">Requires the chunk size.</param>
            <param name="sectorSize">Requires the sector size.</param>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.GetSector(UnityEngine.Vector3)">
            <summary>
            Retrieves UnitySector by Vector3.
            If sector does not exist, it will create one
            </summary>
            <param name="point">The point in world space.</param>
            <returns>UnitySector</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.GetChunk(UnityEngine.Vector3)">
            <summary>
            Retrieves a chunk by a point in world space.
            If sector does not exist, it will create one
            </summary>
            <param name="point">The point in world space.</param>
            <returns>UnityChunk</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.GetBlock(UnityEngine.Vector3)">
            <summary>
            Gets the block given a point in space.
            </summary>
            <param name="point">The point in world space.</param>
            <returns>UnityBlock</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.SetBlock(UnityEngine.Vector3,System.Object)">
            <summary>
            Set a block by point.
            </summary>
            <param name="point">The point in world space.</param>
            <param name="content">The content at which you would like to write the block with.</param>
            <returns>UnityBlock</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.ClearBlock(UnityEngine.Vector3)">
            <summary>
            Erases the current block's content.
            </summary>
            <param name="point">Requires the point in world space that you would like to erase.</param>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.IsOccupied(UnityEngine.Vector3)">
            <summary>
            Is the current point in space occupied by another block?
            </summary>
            <param name="point">Provided with a point in world space.</param>
            <returns>bool</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.ClearSectors">
            <inheritdoc />
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.Destroy">
            <summary>
            The Destructor.
            </summary>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.LoadSector(UnityEngine.Vector3,System.String)">
            <summary>
            Loads a sector from a file and returns it.
            </summary>
            <param name="point">Requires sector's matrix point.</param>
            <returns>ISector</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.SaveSector(UnityEngine.Vector3,System.String)">
            <summary>
            Saves the current world to a given directory.
            </summary>
            <param name="point">Requires a point in world space.</param>
            <param name="url">The directory at which you would like to save your world to. Default is World/WorldName.</param>
            <returns>string</returns>
        </member>
        <member name="M:ChunkMaster.Unity.Framework.UnityWorld.SaveWorld(System.String)">
            <summary>
            Saves the current world to a given directory.
            </summary>
            <param name="url">The directory at which you would like to save your world to. Default is World/WorldName.</param>
            <returns>string</returns>
        </member>
        <member name="T:ChunkMaster.Utils.IO">
            <summary>
            This class may be used for saving or writing files, 
            also conversions from bytes to objects and vice versa.
            </summary>
        </member>
        <member name="M:ChunkMaster.Utils.IO.ObjectToByteArray(System.Object)">
            <summary>
            This method converts an object type to a byte array.
            </summary>
            <param name="obj">The object you would like to convert.</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:ChunkMaster.Utils.IO.ByteArrayToObject(System.Byte[])">
            <summary>
            This method converts a byte array into a readable object.
            </summary>
            <param name="arrBytes">The byte array you would like to convert.</param>
            <returns>object</returns>
        </member>
        <member name="M:ChunkMaster.Utils.IO.SaveToFile(System.String,System.Byte[])">
            <summary>
            Saves the byte array to file.
            </summary>
            <param name="_FileName">Your filename and directory to save to.</param>
            <param name="_ByteArray">Your byte array content you would like to save to.</param>
            <returns>bool</returns>
        </member>
        <member name="M:ChunkMaster.Utils.IO.ReadFile(System.String)">
            <summary>
            Reads a byte array from file.
            </summary>
            <param name="filePath">Provide the filepath at which to load your file.</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:ChunkMaster.Utils.IO.OpenDirectory(System.String)">
            <summary>
            Creates a directory if the path doesn't already exist.
            </summary>
            <param name="path">The path inwhich you would like to create a path.</param>
            <returns>string</returns>
        </member>
        <member name="M:ChunkMaster.Utils.IO.SaveSector(ChunkMaster.NET.Interfaces.ISector,System.String)">
            <summary>
            Save the current sector to a file using matrix points as the filename.
            </summary>
            <param name="sector">The current sector you would like to save.</param>
            <param name="path">The path where you would like to save the sector to.</param>
            <returns>string</returns>
        </member>
        <member name="M:ChunkMaster.Utils.IO.FileExists(System.String)">
            <summary>
            Checks to see if the file exists.
            </summary>
            <param name="path">Requires the file path.</param>
            <returns>bool</returns>
        </member>
        <member name="M:ChunkMaster.Utils.IO.DestroyDirectory(System.String)">
            <summary>
            Destroys the world's directory.
            </summary>
            <param name="path">Requires world path.</param>
        </member>
        <member name="T:ChunkMaster.Utils.Point">
            <summary>
            The point class allows the world class to easy manipulate points in a 3 dimensional space.
            </summary>
        </member>
        <member name="F:ChunkMaster.Utils.Point.zeroPoint">
            <summary>
            Retrieves a point object with coordinates (0, 0, 0).
            </summary>
        </member>
        <member name="P:ChunkMaster.Utils.Point.zero">
            <summary>
            This property returns a point with zero values (0, 0, 0).
            </summary>
        </member>
        <member name="F:ChunkMaster.Utils.Point.onePoint">
            <summary>
            Retrieves a point object with coordinates (1, 1, 1).
            </summary>
        </member>
        <member name="P:ChunkMaster.Utils.Point.one">
            <summary>
            This property returns a point with 1 values (1, 1, 1).
            </summary>
        </member>
        <member name="P:ChunkMaster.Utils.Point.x">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:ChunkMaster.Utils.Point.y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="P:ChunkMaster.Utils.Point.z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
        <member name="M:ChunkMaster.Utils.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor with parameters using doubles.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ChunkMaster.Utils.Point.GetPointByIndex(System.Int32,System.Double)">
            <summary>
            This method converts an index value into a 3D point in space.
            </summary>
            <param name="index">The index you would like to convert.</param>
            <param name="size">The size of your grid.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.GetIndexByPoint(ChunkMaster.Utils.Point,System.Int32)">
            <summary>
            This method converts a point in 3D space to a single value.
            </summary>
            <param name="point">The 3D point you would like to index.</param>
            <param name="size">The size of your grid.</param>
            <returns>int</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another point.
            </summary>
            <param name="obj">The point object you would like to compare with.</param>
            <returns>bool</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.GetHashCode">
            <summary>
            Retrieves the base object's hash code as an integer.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.Snap(System.Int32)">
            <summary>
            This method snaps the current point to a grid given the grid scale value.
            </summary>
            <param name="value">This is the grid size for snapping.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.ToString">
            <summary>
            Dsiplays this point's details.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.ToString(System.String)">
            <summary>
            Dsiplays this point's details.
            </summary>
            <param name="format">The string's format.</param>
            <returns>string</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Equality(ChunkMaster.Utils.Point,ChunkMaster.Utils.Point)">
            <summary>
            Checks if both objects are equal.
            </summary>
            <param name="value1">Requires the first object.</param>
            <param name="value2">Requires the second object.</param>
            <returns>bool</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Inequality(ChunkMaster.Utils.Point,ChunkMaster.Utils.Point)">
            <summary>
            Checks if objects are not equal.
            </summary>
            <param name="value1">Requires the first object.</param>
            <param name="value2">Requires the second object.</param>
            <returns>bool</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Addition(ChunkMaster.Utils.Point,ChunkMaster.Utils.Point)">
            <summary>
            Adds both objects together.
            </summary>
            <param name="value1">Requires the first object.</param>
            <param name="value2">Requires the second object.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_UnaryNegation(ChunkMaster.Utils.Point)">
            <summary>
            Subtracts both objects together.
            </summary>
            <param name="value">Requires the first object to subtract.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Subtraction(ChunkMaster.Utils.Point,ChunkMaster.Utils.Point)">
            <summary>
            Subtracts both objects together.
            </summary>
            <param name="value1">Requires the first object.</param>
            <param name="value2">Requires the second object.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Multiply(ChunkMaster.Utils.Point,ChunkMaster.Utils.Point)">
            <summary>
            Multiplies both objects together.
            </summary>
            <param name="value1">Requires the first object.</param>
            <param name="value2">Requires the second object.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Multiply(ChunkMaster.Utils.Point,System.Double)">
            <summary>
            Multiplies both objects together.
            </summary>
            <param name="value">Requires the first object to subtract.</param>
            <param name="scaleFactor">Requires a multiplier factor.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Multiply(System.Double,ChunkMaster.Utils.Point)">
            <summary>
            Multiplies both objects together.
            </summary>
            <param name="scaleFactor">Requires a multiplier factor.</param>
            <param name="value">Requires the first object to subtract.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Division(ChunkMaster.Utils.Point,ChunkMaster.Utils.Point)">
            <summary>
            Divides both objects together.
            </summary>
            <param name="value1">Requires the first object.</param>
            <param name="value2">Requires the second object.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Division(ChunkMaster.Utils.Point,System.Double)">
            <summary>
            Divides both objects together.
            </summary>
            <param name="value">Requires the first object.</param>
            <param name="scaleFactor">Requires a scale factor.</param>
            <returns>Point</returns>
        </member>
        <member name="M:ChunkMaster.Utils.Point.op_Division(System.Double,ChunkMaster.Utils.Point)">
            <summary>
            Divides both objects together.
            </summary>
            <param name="scaleFactor">Requires a scale factor.</param>
            <param name="value">Requires the first object.</param>
            <returns>Point</returns>
        </member>
        <member name="T:ChunkMaster.Utils.SnapToGrid">
            <summary>
            A simple utility class for snapping points 
            to a grid in world or local space.
            </summary>
        </member>
        <member name="M:ChunkMaster.Utils.SnapToGrid.snap(System.Double,System.Int32)">
            <summary>
            Snap a single value to the grid.
            </summary>
            <param name="num">The current value you would like to snap.</param>
            <param name="value">The grid size you would like top snap to.</param>
            <returns>double</returns>
        </member>
        <member name="M:ChunkMaster.Utils.SnapToGrid.snap(ChunkMaster.Utils.Point,System.Int32)">
            <summary>
            Snap to a 3 dimensional grid given a Point object.
            </summary>
            <param name="hit_coor">The current Point object you would like to snap to the grid.</param>
            <param name="value">The size of the grid you would like to snap to.</param>
            <returns>Point</returns>
        </member>
        <member name="T:MyExtensions">
            <summary>
            Extension methods for the utilities namespace.
            </summary>
        </member>
        <member name="M:MyExtensions.Vector3(ChunkMaster.Utils.Point)">
            <summary>
            Extension method to retrieve a Vector3 from a Point object.
            </summary>
            <param name="point">Returns Vector3 of this current point.</param>
            <returns>Vector3</returns>
        </member>
        <member name="M:MyExtensions.Snap(UnityEngine.Vector3,System.Int32)">
            <summary>
            Snaps the current point to grid.
            </summary>
            <param name="point">This current point.</param>
            <param name="value">The grid value to snap to.</param>
            <returns>Vector3</returns>
        </member>
        <member name="M:MyExtensions.Point(UnityEngine.Vector3)">
            <summary>
            Extension method to retrieve a Point from a Vector3 object.
            </summary>
            <param name="point">The current vector3.</param>
            <returns>Point</returns>
        </member>
    </members>
</doc>
